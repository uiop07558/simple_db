// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: definition.proto

#include "definition.pb.h"
#include "definition.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace objectstore {

static const char* ObjectStore_method_names[] = {
  "/objectstore.ObjectStore/CreateTable",
  "/objectstore.ObjectStore/GetTableInfo",
  "/objectstore.ObjectStore/Transaction",
};

std::unique_ptr< ObjectStore::Stub> ObjectStore::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ObjectStore::Stub> stub(new ObjectStore::Stub(channel, options));
  return stub;
}

ObjectStore::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateTable_(ObjectStore_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTableInfo_(ObjectStore_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Transaction_(ObjectStore_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status ObjectStore::Stub::CreateTable(::grpc::ClientContext* context, const ::objectstore::CreateTableRequest& request, ::objectstore::CreateTableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::objectstore::CreateTableRequest, ::objectstore::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTable_, context, request, response);
}

void ObjectStore::Stub::async::CreateTable(::grpc::ClientContext* context, const ::objectstore::CreateTableRequest* request, ::objectstore::CreateTableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::objectstore::CreateTableRequest, ::objectstore::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, std::move(f));
}

void ObjectStore::Stub::async::CreateTable(::grpc::ClientContext* context, const ::objectstore::CreateTableRequest* request, ::objectstore::CreateTableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::CreateTableResponse>* ObjectStore::Stub::PrepareAsyncCreateTableRaw(::grpc::ClientContext* context, const ::objectstore::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::objectstore::CreateTableResponse, ::objectstore::CreateTableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::objectstore::CreateTableResponse>* ObjectStore::Stub::AsyncCreateTableRaw(::grpc::ClientContext* context, const ::objectstore::CreateTableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ObjectStore::Stub::GetTableInfo(::grpc::ClientContext* context, const ::objectstore::GetTableInfoRequest& request, ::objectstore::GetTableInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::objectstore::GetTableInfoRequest, ::objectstore::GetTableInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTableInfo_, context, request, response);
}

void ObjectStore::Stub::async::GetTableInfo(::grpc::ClientContext* context, const ::objectstore::GetTableInfoRequest* request, ::objectstore::GetTableInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::objectstore::GetTableInfoRequest, ::objectstore::GetTableInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTableInfo_, context, request, response, std::move(f));
}

void ObjectStore::Stub::async::GetTableInfo(::grpc::ClientContext* context, const ::objectstore::GetTableInfoRequest* request, ::objectstore::GetTableInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTableInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::objectstore::GetTableInfoResponse>* ObjectStore::Stub::PrepareAsyncGetTableInfoRaw(::grpc::ClientContext* context, const ::objectstore::GetTableInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::objectstore::GetTableInfoResponse, ::objectstore::GetTableInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTableInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::objectstore::GetTableInfoResponse>* ObjectStore::Stub::AsyncGetTableInfoRaw(::grpc::ClientContext* context, const ::objectstore::GetTableInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTableInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::objectstore::TransactionRequest, ::objectstore::TransactionResponse>* ObjectStore::Stub::TransactionRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::objectstore::TransactionRequest, ::objectstore::TransactionResponse>::Create(channel_.get(), rpcmethod_Transaction_, context);
}

void ObjectStore::Stub::async::Transaction(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::objectstore::TransactionRequest,::objectstore::TransactionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::objectstore::TransactionRequest,::objectstore::TransactionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Transaction_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::objectstore::TransactionRequest, ::objectstore::TransactionResponse>* ObjectStore::Stub::AsyncTransactionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::objectstore::TransactionRequest, ::objectstore::TransactionResponse>::Create(channel_.get(), cq, rpcmethod_Transaction_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::objectstore::TransactionRequest, ::objectstore::TransactionResponse>* ObjectStore::Stub::PrepareAsyncTransactionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::objectstore::TransactionRequest, ::objectstore::TransactionResponse>::Create(channel_.get(), cq, rpcmethod_Transaction_, context, false, nullptr);
}

ObjectStore::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectStore_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObjectStore::Service, ::objectstore::CreateTableRequest, ::objectstore::CreateTableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObjectStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::CreateTableRequest* req,
             ::objectstore::CreateTableResponse* resp) {
               return service->CreateTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectStore_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObjectStore::Service, ::objectstore::GetTableInfoRequest, ::objectstore::GetTableInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ObjectStore::Service* service,
             ::grpc::ServerContext* ctx,
             const ::objectstore::GetTableInfoRequest* req,
             ::objectstore::GetTableInfoResponse* resp) {
               return service->GetTableInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectStore_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ObjectStore::Service, ::objectstore::TransactionRequest, ::objectstore::TransactionResponse>(
          [](ObjectStore::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::objectstore::TransactionResponse,
             ::objectstore::TransactionRequest>* stream) {
               return service->Transaction(ctx, stream);
             }, this)));
}

ObjectStore::Service::~Service() {
}

::grpc::Status ObjectStore::Service::CreateTable(::grpc::ServerContext* context, const ::objectstore::CreateTableRequest* request, ::objectstore::CreateTableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObjectStore::Service::GetTableInfo(::grpc::ServerContext* context, const ::objectstore::GetTableInfoRequest* request, ::objectstore::GetTableInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObjectStore::Service::Transaction(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::objectstore::TransactionResponse, ::objectstore::TransactionRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace objectstore

